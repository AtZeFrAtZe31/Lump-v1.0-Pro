name: Android CI & Release
on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
concurrency:
  group: android-${{ github.ref }}
  cancel-in-progress: true
permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: read
env:
  PROJECT_DIR: Lump-v1.0-Pro-Android-Release.zip_unzipped
  MODULE_PATH: app
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.caching=true -Dorg.gradle.parallel=true -Dkotlin.incremental=true
jobs:
  build:
    name: CI Build (${{ matrix.build_type }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        build_type: [ debug, releaseUnsigned ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate Gradle Wrapper
        if: hashFiles('**/gradle-wrapper.properties') != ''
        uses: gradle/wrapper-validation-action@v2
      - name: Check Gradle Wrapper
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "ERROR: Gradle wrapper not found! Please run 'gradle wrapper --gradle-version 8.9' and commit the wrapper files."
            echo "Required files: gradlew, gradlew.bat, gradle/wrapper/gradle-wrapper.jar, gradle/wrapper/gradle-wrapper.properties"
            exit 1
          fi
          chmod +x ./gradlew
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true
      # Optional additional SDK components (uncomment if needed)
      # - name: Ensure build tools
      #   run: sdkmanager "build-tools;34.0.0" "platforms;android-34"
      - name: Assemble (${{ matrix.build_type }})
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          if [ "${{ matrix.build_type }}" = debug ]; then
            ./gradlew :${{ env.MODULE_PATH }}:assembleDebug
          else
            ./gradlew :${{ env.MODULE_PATH }}:assembleRelease
          fi
      - name: Unit Tests (debug)
        if: matrix.build_type == 'debug'
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: ./gradlew testDebugUnitTest
      - name: Android Lint (debug)
        if: matrix.build_type == 'debug'
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./gradlew :${{ env.MODULE_PATH }}:lintDebug
      - name: Detekt (optional)
        if: matrix.build_type == 'debug'
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if ./gradlew tasks | grep -qi detekt; then
            ./gradlew detekt
          else
            echo "Detekt not configured; skipping.";
          fi
      - name: Extract Version
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ./gradlew :${{ env.MODULE_PATH }}:properties > gradle_props.txt
          VERSION_NAME=$(grep -E '^versionName:' gradle_props.txt | awk '{print $2}')
          VERSION_CODE=$(grep -E '^versionCode:' gradle_props.txt | awk '{print $2}')
          echo "version_name=${VERSION_NAME:-unknown}" >> $GITHUB_OUTPUT
          echo "version_code=${VERSION_CODE:-0}" >> $GITHUB_OUTPUT
      - name: Upload Debug APK
        if: matrix.build_type == 'debug'
        uses: actions/upload-artifact@v4
        with:
          name: apk-debug-${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.version_code }}
          path: ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/apk/debug/*.apk
          retention-days: 7
      - name: Upload Unsigned Release APK
        if: matrix.build_type == 'releaseUnsigned'
        uses: actions/upload-artifact@v4
        with:
          name: apk-release-unsigned-${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.version_code }}
          path: ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/apk/release/*.apk
          retention-days: 10
  release_tag:
    name: Signed Release & GitHub Release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Validate Gradle Wrapper
        if: hashFiles('**/gradle-wrapper.properties') != ''
        uses: gradle/wrapper-validation-action@v2
      - name: Check Gradle Wrapper
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ ! -f "./gradlew" ]; then
            echo "ERROR: Gradle wrapper not found! Please run 'gradle wrapper --gradle-version 8.9' and commit the wrapper files."
            echo "Required files: gradlew, gradlew.bat, gradle/wrapper/gradle-wrapper.jar, gradle/wrapper/gradle-wrapper.properties"
            exit 1
          fi
          chmod +x ./gradlew
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true
      - name: Verify signing secrets
        run: |
          missing=0
          if [ -z "${{ secrets.KEYSTORE_BASE64 }}" ]; then echo "Missing secret: KEYSTORE_BASE64"; missing=1; fi
          if [ -z "${{ secrets.KEY_ALIAS }}" ]; then echo "Missing secret: KEY_ALIAS"; missing=1; fi
          if [ -z "${{ secrets.KEY_PASSWORD }}" ]; then echo "Missing secret: KEY_PASSWORD"; missing=1; fi
          if [ -z "${{ secrets.STORE_PASSWORD }}" ]; then echo "Missing secret: STORE_PASSWORD"; missing=1; fi
          if [ $missing -eq 1 ]; then echo "Aborting: missing signing secrets."; exit 1; fi
      - name: Restore keystore
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "$KEYSTORE_BASE64" | base64 -d > release.keystore
          ls -l release.keystore
      - name: Assemble Signed Release (APK + AAB)
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          STORE_PASSWORD: ${{ secrets.STORE_PASSWORD }}
          GRADLE_OPTS: ${{ env.GRADLE_OPTS }}
        run: |
          ./gradlew :${{ env.MODULE_PATH }}:assembleRelease :${{ env.MODULE_PATH }}:bundleRelease
      - name: Crashlytics Mapping Upload (optional)
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if ./gradlew tasks | grep -qi uploadCrashlyticsMappingFileRelease; then
            ./gradlew :${{ env.MODULE_PATH }}:uploadCrashlyticsMappingFileRelease || echo "Crashlytics upload failed (non-fatal)";
          else
            echo "Crashlytics task not found; skipping.";
          fi
      - name: Extract Version
        id: version
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ./gradlew :${{ env.MODULE_PATH }}:properties > gradle_props.txt
          VERSION_NAME=$(grep -E '^versionName:' gradle_props.txt | awk '{print $2}')
          VERSION_CODE=$(grep -E '^versionCode:' gradle_props.txt | awk '{print $2}')
          echo "version_name=${VERSION_NAME:-unknown}" >> $GITHUB_OUTPUT
          echo "version_code=${VERSION_CODE:-0}" >> $GITHUB_OUTPUT
      - name: Upload Signed Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-signed-${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.version_code }}
          path: |
            ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/apk/release/*.apk
            ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/bundle/release/*.aab
          retention-days: 30
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ steps.version.outputs.version_name }} (code ${{ steps.version.outputs.version_code }})
          files: |
            ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/apk/release/*.apk
            ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/bundle/release/*.aab
          generate_release_notes: true
      - name: Google Play Internal Track (optional)
        if: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON || secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}
        env:
          JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          JSON_B64: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64 }}
        run: |
          if [ -n "$JSON_B64" ]; then echo "$JSON_B64" | base64 -d > play_service_account.json; 
          elif echo "$JSON" | grep -q '"type"'; then echo "$JSON" > play_service_account.json; else echo "Invalid Play service account secret"; exit 1; fi
          ls -l play_service_account.json
        shell: bash
      - name: Upload to Play (internal) (optional)
        if: steps.version.outputs.version_name != '' && (secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON || secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON_BASE64)
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJson: play_service_account.json
          packageName: com.atze.lump
          releaseFiles: ${{ env.PROJECT_DIR }}/${{ env.MODULE_PATH }}/build/outputs/bundle/release/*.aab
          track: internal
          status: completed
      - name: Sentry Release (optional)
        if: secrets.SENTRY_AUTH_TOKEN && secrets.SENTRY_ORG && secrets.SENTRY_PROJECT
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          version: ${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.version_code }}
          finalize: true
      - name: Summary
        run: echo "Created release ${{ steps.version.outputs.version_name }} (code ${{ steps.version.outputs.version_code }})"